@model IEnumerable<MSIT158_2_FinalProject.Models.TMember>

@{
    ViewData["Title"] = "List";
    Layout = "_Layout_Backstage";
}

<h1>會員資料一覽表</h1>

<div class="row mb-3">
    <div class="col-2">
        <select class="form-select" aria-label="Default select example" id="idst1">
        </select>
    </div>
    <div class="col-6">
        <nav>
            <ul class="pagination" id="ul1">
            </ul>
        </nav>
    </div>
    <div class="col-2">
        <select class="form-select" aria-label="Default select example" id="idst2">
            <option value="asc" selected>會員編號升冪</option>
            <option value="desc">會員編號降冪</option>
        </select>
    </div>
    <div class="col-2">
        <input type="search" placeholder="搜尋景點資料" class="form-control" id="inputSearch" />
    </div>
</div>


<div class="row mb-3" id="div2">
@* <div class="form-check form-switch col-1">
    <input class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckChecked_1" checked>
    <label class="form-check-label" for="flexSwitchCheckChecked_1">序號</label>
</div>
<div class="form-check form-switch col-1">
    <input class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckChecked_2" checked>
    <label class="form-check-label" for="flexSwitchCheckChecked_2">姓名</label>
</div>
<div class="form-check form-switch col-1">
    <input class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckChecked_3" checked>
    <label class="form-check-label" for="flexSwitchCheckChecked_3">電子信箱</label>
</div>
<div class="form-check form-switch col-1">
        <input class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckChecked_4" checked>
        <label class="form-check-label" for="flexSwitchCheckChecked_4">密碼</label>
</div>
<div class="form-check form-switch col-1">
        <input class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckChecked_5" checked>
        <label class="form-check-label" for="flexSwitchCheckChecked_5">加鹽</label>
</div>
<div class="form-check form-switch col-1">
        <input class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckChecked_6" checked>
        <label class="form-check-label" for="flexSwitchCheckChecked_6">照片</label>
</div>
<div class="form-check form-switch col-1">
        <input class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckChecked_7" checked>
        <label class="form-check-label" for="flexSwitchCheckChecked_7">地址</label>
</div>
<div class="form-check form-switch col-1">
        <input class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckChecked_8" checked>
        <label class="form-check-label" for="flexSwitchCheckChecked_8">手機</label>
</div>
<div class="form-check form-switch col-1">
        <input class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckChecked_9" checked>
        <label class="form-check-label" for="flexSwitchCheckChecked_9">生日</label>
</div>
<div class="form-check form-switch col-1">
        <input class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckChecked_10" checked>
        <label class="form-check-label" for="flexSwitchCheckChecked_10">性別</label>
</div>
<div class="form-check form-switch col-1">
        <input class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckChecked_11" checked>
        <label class="form-check-label" for="flexSwitchCheckChecked_11">點數</label>
</div>
<div class="form-check form-switch col-1">
        <input class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckChecked_12" checked>
        <label class="form-check-label" for="flexSwitchCheckChecked_12">會員等級</label>
</div> *@
</div>

<p>
    <a asp-action="Create">新增會員</a>
</p>

<div class="row row-cols-1 row-cols-md-3 g-4" id="div1">
    <table class="table table-primary table-hover">
        <thead>
            <tr id="idtr1">
                
            </tr>
        </thead>
        <tbody id="idtbody1">

        </tbody>
    </table>
</div>
@* <table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.MemberId)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.MemberName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Cellphone)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Address)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Sex)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Password)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Salt)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.EMail)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Points)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Vipid)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.MemberPhoto)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Wallet)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.MemberId)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.MemberName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Cellphone)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Address)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Sex)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Password)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Salt)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.EMail)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Points)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Vipid)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.MemberPhoto)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Wallet)
            </td>
            <td>
                @Html.ActionLink("Edit", "Edit", new { /* id=item.PrimaryKey */ }) |
                @Html.ActionLink("Details", "Details", new { /* id=item.PrimaryKey */ }) |
                @Html.ActionLink("Delete", "Delete", new { /* id=item.PrimaryKey */ })
            </td>
        </tr>
}
    </tbody>
</table> *@
@section Scripts {
    <script>
        const divSpots = document.querySelector('#div1');
        const divtbody = document.querySelector('#idtbody1');
        const ulPaging = document.querySelector('#ul1');
        const ulPagename = document.querySelector('#ul2');
        const inpSearch = document.querySelector('#inputSearch');
        const sltop = document.querySelector('#idst1');
        const sltop2 = document.querySelector('#idst2');
        const divf = document.querySelector('#div2');
        const thss = document.querySelector('#idtr1');
        const switchnames = [
            '序號',
            '姓名',
            '電子信箱',
            '密碼',
            '加鹽',
            '照片',
            '地址',
            '手機',
            '生日',
            '性別',
            '點數',
            '會員等級'
        ];
        //顯示隱藏按鈕
        const switchs = switchnames.map((name, index) => {
            return (
                `
<div class="form-check form-switch col-1">
    <input class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckChecked_${index + 1}" checked>
    <label class="form-check-label" for="flexSwitchCheckChecked_${index + 1}">${name}</label>
</div>
                `
            )
        });
        divf.innerHTML = switchs.join("");
        //顯示標題
        const ths = switchnames.map((name, index) => {
            return (`<th scope="col" id="idth${index + 1}">${name}</th>`)
        });
        thss.innerHTML = ths.join("");


        const searchData = {
            "memberId": 0,
            "keyword": "",
            "page": 1,
            "pageSize": 30,
            "sortType": "desc",
            "sortBy": "SpotId"
        };

        const loadMemberList = async () => {
            const url = 'https://localhost:7160/api/TMembers/MemberSearch';
            const response = await fetch(url, {
                method: 'POST',
                body: JSON.stringify(searchData),
                headers: { 'Content-Type': 'application/json' }
            });
            const data = await response.json();
            console.log(data);

            //顯示會員資料
            const MLists = data.membersResult.map(mlist => {
                const { memberId, memberName, cellphone, address, birthday, sex, password, salt, eMail, points, vipid, memberPhoto, wallet } = mlist;
                const count = 0;
                return(
                    `
            <tr>
                <th scope="row" id="idtd1">${memberId}</th>
                <td id="idtd2">${memberName}</td>
                <td id="idtd3">${eMail}</td>
                <td id="idtd4">${password}</td>
                <td id="idtd5">${salt}</td>
                <td id="idtd6">${memberPhoto}</td>
                <td id="idtd7">${address}</td>
                <td id="idtd8">${cellphone}</td>
                <td id="idtd9">${birthday}</td>
                <td id="idtd10">${sex}</td>
                <td id="idtd11">${points}</td>
                <td id="idtd12">${vipid}</td>
                <td>
                <button type="button" class="btn btn-warning"><a href="/Member/Edit/${memberId}">修改</a></button> |
                <a href="/Member/Details/${memberId}">Details</a> |
                <button type="button" class="btn btn-warning" value="${memberId}" id="iddelete_${memberId}" onclick="deleteMember(${memberId})"><a href="/Member/Delete/${memberId}" onclick="return confirm('確定要刪除嗎?')">刪除</a></button>
                </td>
            </tr>    
                    `
                )
            })
            // 將生成的表格行字符串加入到 `tbody` 中
            divtbody.innerHTML = MLists.join("");

            

            //顯示分頁按鈕
            let liPages = "";
            for (let i = 1, max = data.totalPages; i <= max; i++) {
                liPages += `<li class="page-item" onclick="pagingHandler(${i})"><a class="page-link">${i}</a></li>`
            }
            ulPaging.innerHTML = liPages;
            //隱藏功能開關
            displaybtn();
            
        };
        loadMemberList();

        //刪除會員
        console.log('test1');
        async function deleteMember(memberId) {
            if (confirm('確定要刪除嗎?')) {
                const url2 = `https://localhost:7160/api/TMembers/${memberId}`;
                const response = await fetch(url2, {
                    method: 'DELETE',
                    headers: { 'Content-Type': 'application/json' }
                })
                loadMemberList();
            }
        };

        //顯示選擇頁數按鈕
        let sltPages = "";
        for (let i = 30, max = 50; i <= max; i += 10) {
            sltPages += `<option value="${i}">每頁${i}筆資料</option>`
        }
        sltop.innerHTML = sltPages;
        //搜尋欄
        inpSearch.addEventListener('keydown', event => {
            if (event.keyCode === 13) {
                console.log(event);
                searchData.keyword = event.target.value;
                searchData.categoryId = 0;
                searchData.page = 1;
                loadMemberList();
            }
        })
        //分頁按鈕
        const pagingHandler = page => {
            searchData.page = page;
            loadMemberList();
        }
        //選擇頁數按鈕
        sltop.addEventListener('change', event => {
            searchData.pageSize = event.target.value;
            loadMemberList();
        })
        //選擇排序
        sltop2.addEventListener('change', event => {
            searchData.sortType = event.target.value;
            searchData.page = 1;
            loadMemberList();
        })
        



        //隱藏功能按鈕
        const displaybtn = () => {
            const checks = {};
            const ths = {};
            const tds = {};

            for (let i = 1; i <= 12; i++) {
                checks[i] = document.querySelector(`#flexSwitchCheckChecked_${i}`);
                ths[i] = document.querySelector(`#idth${i}`);
                tds[i] = document.querySelectorAll(`#idtd${i}`);
                checks[i].checked = true;

                // 使用闭包来保持对 i 的正确引用
                (function (index) {
                    checks[index].addEventListener('change', function () {
                        if (!this.checked) {
                            ths[index].style.display = 'none';
                            for (let j = 0; j < tds[index].length; j++) {
                                tds[index][j].style.display = 'none';
                            }
                        } else {
                            ths[index].style.display = '';
                            for (let j = 0; j < tds[index].length; j++) {
                                tds[index][j].style.display = '';
                            }
                        }
                    });
                })(i);
            }



            // const check1 = document.querySelector('#flexSwitchCheckChecked_1');
            // const check2 = document.querySelector('#flexSwitchCheckChecked_2');
            // const check3 = document.querySelector('#flexSwitchCheckChecked_3');
            // const check4 = document.querySelector('#flexSwitchCheckChecked_4');
            // const check5 = document.querySelector('#flexSwitchCheckChecked_5');
            // const check6 = document.querySelector('#flexSwitchCheckChecked_6');
            // const check7 = document.querySelector('#flexSwitchCheckChecked_7');
            // const check8 = document.querySelector('#flexSwitchCheckChecked_8');
            // const check9 = document.querySelector('#flexSwitchCheckChecked_9');
            // const check10 = document.querySelector('#flexSwitchCheckChecked_10');
            // const check11 = document.querySelector('#flexSwitchCheckChecked_11');
            // const check12 = document.querySelector('#flexSwitchCheckChecked_12');
            // const th1 = document.querySelector('#idth1');
            // const th2 = document.querySelector('#idth2');
            // const th3 = document.querySelector('#idth3');
            // const th4 = document.querySelector('#idth4');
            // const th5 = document.querySelector('#idth5');
            // const th6 = document.querySelector('#idth6');
            // const th7 = document.querySelector('#idth7');
            // const th8 = document.querySelector('#idth8');
            // const th9 = document.querySelector('#idth9');
            // const th10 = document.querySelector('#idth10');
            // const th11 = document.querySelector('#idth11');
            // const th12 = document.querySelector('#idth12');
            // const td1 = document.querySelectorAll('#idtd1');
            // const td2 = document.querySelectorAll('#idtd2');
            // const td3 = document.querySelectorAll('#idtd3');
            // const td4 = document.querySelectorAll('#idtd4');
            // const td5 = document.querySelectorAll('#idtd5');
            // const td6 = document.querySelectorAll('#idtd6');
            // const td7 = document.querySelectorAll('#idtd7');
            // const td8 = document.querySelectorAll('#idtd8');
            // const td9 = document.querySelectorAll('#idtd9');
            // const td10 = document.querySelectorAll('#idtd10');
            // const td11 = document.querySelectorAll('#idtd11');
            // const td12 = document.querySelectorAll('#idtd12');

            // for (let i = 1; i <= 12; i++) {
            //     const check`${i}` = document.querySelector(`#flexSwitchCheckChecked_${i}`);
            //     const th1`${i}` = document.querySelector(`#idth1${i}`);
            //     const td1`${i}` = document.querySelectorAll(`#idtd1${i}`);
            // }

            // check2.addEventListener('change', function () {
            //     if (this.checked) {
            //         th2.style.display = '';
            //         for (let i = 0; i < td2.length; i++) {
            //             td2[i].style.display = '';
            //         }
            //     }
            //     else {
            //         th2.style.display = 'none';
            //         for (let i = 0; i < td2.length; i++) {
            //             td2[i].style.display = 'none';
            //         }
            //     }
            // });
            // check3.addEventListener('change', function () {
            //     if (!this.checked) {
            //         th3.style.display = 'none';
            //         for (let i = 0; i < td3.length; i++) {
            //             td3[i].style.display = 'none';
            //         }
            //     }
            //     else {
            //         th3.style.display = '';
            //         for (let i = 0; i < td3.length; i++) {
            //             td3[i].style.display = '';
            //         }
            //     }
            // });
        };
    </script>
}